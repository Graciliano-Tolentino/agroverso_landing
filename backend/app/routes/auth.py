# ============================================================================================
# üîê POST /api/auth/login ‚Äî Autentica√ß√£o JWT Assinada com Seguran√ßa Regenerativa
# ============================================================================================
# üå± Entrada: JSON com email e senha
# üîç Verifica√ß√£o contra banco e status ativo
# üîê Senha protegida com bcrypt (hash comparado com seguran√ßa)
# üßæ Retorno: access_token + tipo + nome + perfil + email
# ‚ùå Erros: 401 para credenciais inv√°lidas, 422 para payload malformado (via Pydantic)
# ============================================================================================

from fastapi import APIRouter, HTTPException, status, Depends
from sqlalchemy.orm import Session

from app.schemas.auth_schema import LoginSchema, TokenResponse
from app.models.user import User
from app.core.security import verificar_senha
from app.services.auth_service import criar_token_jwt
from app.core.database import get_db

router = APIRouter()

@router.post("/login", response_model=TokenResponse, tags=["üîê Autentica√ß√£o"])
def login(dados: LoginSchema, db: Session = Depends(get_db)):
    """
    Endpoint oficial de login JWT Agroverso.
    Valida usu√°rio, verifica hash e retorna token assinado com payload seguro.
    """

    # üîé Consulta por e-mail (caso-insens√≠vel se configurado no banco)
    usuario = db.query(User).filter(User.email == dados.email).first()

    if not usuario or not usuario.ativo:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Credenciais inv√°lidas"
        )

    if not verificar_senha(dados.senha, usuario.senha_hash):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Credenciais inv√°lidas"
        )

    # ========================================================================================
    # üîê Gera√ß√£o do Token JWT Assinado
    # ----------------------------------------------------------------------------------------
    # Payload cont√©m apenas informa√ß√µes necess√°rias e controladas:
    #   - sub: identificador √∫nico do usu√°rio (email)
    #   - perfil: controle de RBAC (n√≠vel de acesso)
    #   - nome, email: dados √∫teis para frontend
    #   - exp: expira√ß√£o autom√°tica definida na camada de servi√ßo
    # ========================================================================================

    token_payload = {
        "sub": usuario.email,
        "perfil": usuario.perfil,
        "nome": usuario.nome,
        "email": usuario.email
    }

    token_jwt = criar_token_jwt(payload=token_payload)

    # ========================================================================================
    # üì§ Retorno Padronizado
    # ----------------------------------------------------------------------------------------
    # Resposta 200 OK com:
    #   - access_token: JWT assinado (Authorization: Bearer ...)
    #   - token_type: padr√£o OAuth2
    #   - perfil, nome, email: dados √∫teis ao frontend
    # ========================================================================================

    return {
        "access_token": token_jwt,
        "token_type": "bearer",
        "perfil": usuario.perfil,
        "nome": usuario.nome,
        "email": usuario.email
    }
