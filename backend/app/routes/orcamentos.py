# ============================================================================================
# üì¨ backend/app/routes/orcamentos.py ‚Äî Rota de Cria√ß√£o de Or√ßamentos Agroverso
# ============================================================================================
# üî∞ Endpoint RESTful: POST /api/orcamentos
# üîé Valida os dados do formul√°rio enviados pelo frontend
# üíæ Persiste a solicita√ß√£o na base de dados SQL (tabela "orcamentos")
# üì§ Retorna resposta completa no padr√£o OrcamentoResponse
# ============================================================================================

from fastapi import APIRouter, Depends, status
from sqlalchemy.orm import Session

from app.schemas.orcamento_schema import OrcamentoCreate, OrcamentoResponse
from app.models.orcamento import Orcamento
from app.core.database import get_db

router = APIRouter()

@router.post(
    "/orcamentos",
    response_model=OrcamentoResponse,
    status_code=status.HTTP_201_CREATED,
    tags=["üì¨ Or√ßamentos"]
)
def criar_orcamento(dados: OrcamentoCreate, db: Session = Depends(get_db)):
    """
    Recebe dados de or√ßamento do frontend,
    salva na base e retorna confirma√ß√£o completa ao usu√°rio.
    """

    # ========================================================================================
    # üèóÔ∏è Cria√ß√£o do objeto ORM com os dados recebidos
    # ----------------------------------------------------------------------------------------
    # ‚ö†Ô∏è Campo 'status' e 'criado_em' s√£o atribu√≠dos automaticamente conforme o modelo
    # ========================================================================================

    novo_orcamento = Orcamento(
        nome=dados.nome,
        email=dados.email,
        mensagem=dados.mensagem,
        produto="hidroponia",  # üîÅ opcionalmente alterar para aceitar frontend din√¢mico
        status="novo"          # pode ser omitido se j√° for o default do modelo
    )

    # ========================================================================================
    # üíæ Persist√™ncia no banco de dados com SQLAlchemy
    # ----------------------------------------------------------------------------------------
    # ‚úÖ Commit efetiva a transa√ß√£o e injeta o ID automaticamente
    # ========================================================================================

    db.add(novo_orcamento)
    db.commit()
    db.refresh(novo_orcamento)  # necess√°rio para acessar ID e timestamps ap√≥s o commit

    # ========================================================================================
    # üì§ Convers√£o ORM ‚Üí Pydantic (resposta JSON padr√£o Agroverso)
    # ========================================================================================

    return OrcamentoResponse.from_orm(novo_orcamento)
