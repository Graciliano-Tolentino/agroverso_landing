# ============================================================================================
# üõ°Ô∏è backend/app/services/auth_service.py ‚Äî Servi√ßo de Autentica√ß√£o e Tokens JWT do Agroverso
# ============================================================================================
# üìå Respons√°vel por:
#   - Validar credenciais fornecidas no login
#   - Gerar tokens JWT seguros e temporizados
#   - Verificar tokens e retornar identidade ativa do usu√°rio
# --------------------------------------------------------------------------------------------
# ‚ú® Desenvolvido com sabedoria (clareza de prop√≥sito), for√ßa (criptografia bcrypt + JWT)
#     e beleza (acoplamento limpo e fluidez de uso por m√∫ltiplas interfaces frontend).
# ============================================================================================

from datetime import datetime, timedelta
from jose import jwt, JWTError
from passlib.context import CryptContext
from fastapi import HTTPException, status

from app.config import settings
from app.core.database import SessionLocal
from app.models.user import User

# ============================================================================================
# üîê autenticar_usuario(email, senha)
# --------------------------------------------------------------------------------------------
# Realiza:
#   - Busca segura do usu√°rio pelo e-mail
#   - Valida√ß√£o da senha fornecida com a hash armazenada (bcrypt)
#   - Gera√ß√£o de um token JWT assinado contendo:
#       ‚Ä¢ sub: e-mail do usu√°rio
#       ‚Ä¢ perfil: perfil de acesso (RBAC)
#       ‚Ä¢ exp: expira√ß√£o baseada em settings
# Retorna:
#   - O objeto `User` com um atributo `token` din√¢mico (n√£o persistido no banco)
# ============================================================================================

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def autenticar_usuario(email: str, senha: str) -> User:
    db = SessionLocal()
    usuario = db.query(User).filter(User.email == email).first()

    if not usuario:
        return None

    if not pwd_context.verify(senha, usuario.senha_hash):
        return None

    payload = {
        "sub": usuario.email,
        "perfil": usuario.perfil,
        "exp": datetime.utcnow() + timedelta(minutes=settings.JWT_EXPIRE_MINUTES)
    }

    token = jwt.encode(payload, settings.JWT_SECRET, algorithm="HS256")

    # Atributo transit√≥rio que ser√° usado apenas no retorno do login
    usuario.token = token

    return usuario

# ============================================================================================
# üß† verificar_token(token)
# --------------------------------------------------------------------------------------------
# Recebe um token JWT como string:
#   - Decodifica e valida a assinatura com `settings.JWT_SECRET`
#   - Verifica o campo `sub` (e-mail)
#   - Retorna o objeto `User` correspondente, se existir
#   - Lan√ßa exce√ß√µes claras se o token estiver expirado, malformado ou inv√°lido
# ============================================================================================

def verificar_token(token: str) -> User:
    try:
        payload = jwt.decode(token, settings.JWT_SECRET, algorithms=["HS256"])
        email = payload.get("sub")

        if not email:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token inv√°lido: e-mail ausente."
            )

        db = SessionLocal()
        usuario = db.query(User).filter(User.email == email).first()

        return usuario

    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token expirado, inv√°lido ou malformado."
        )
