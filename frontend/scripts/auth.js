// ============================================================================================
// üõ°Ô∏è scripts/auth.js ‚Äî Prote√ß√£o de P√°ginas Privadas Agroverso com Valida√ß√£o Real
// ============================================================================================
// üîê Valida√ß√£o JWT com backend FastAPI (via /api/auth/verify)
// üåø Seguran√ßa regenerativa, baseada em tokens assinados, com controle RBAC e expira√ß√£o real
// üí° Refatorado para impedir falsifica√ß√µes de sess√£o e garantir acesso apenas autorizado
// ============================================================================================

(() => {
  'use strict'; // üîê Restringe o escopo e previne falhas silenciosas

  const loginPage = "login.html";

  // üîÅ Fun√ß√£o de fallback segura para redirecionar usu√°rios inv√°lidos
  const redirecionarParaLogin = (mensagem = "Sess√£o inv√°lida. Fa√ßa login novamente.") => {
    alert(`‚ö†Ô∏è ${mensagem}`);
    window.location.href = loginPage;
  };

  // üîê Recupera o token JWT armazenado localmente
  const token = localStorage.getItem("agro_token");

  if (!token) {
    console.warn("üîê [Agroverso] Token ausente. Redirecionando para login.");
    return redirecionarParaLogin();
  }

  // üõ°Ô∏è Requisi√ß√£o ao backend para validar o token de forma segura
  fetch("/api/auth/verify", {
    method: "GET",
    headers: {
      "Authorization": `Bearer ${token}`
    }
  })

    .then(async (resposta) => {
      if (!resposta.ok) {
        if (resposta.status === 401) {
          console.warn("üö´ [Agroverso] Token inv√°lido ou expirado.");
          return redirecionarParaLogin("Sess√£o expirada. Fa√ßa login novamente.");
        }
        console.error(`‚ùå Erro inesperado na verifica√ß√£o do token [${resposta.status}]`);
        return redirecionarParaLogin("Erro interno ao validar a sess√£o.");
      }

      const dados = await resposta.json();

      const { perfil, email } = dados;
      if (!perfil || !email) {
        console.error("‚ùå [Agroverso] Resposta do backend incompleta ou inv√°lida.");
        return redirecionarParaLogin("Resposta inv√°lida do servidor.");
      }

      // üó∫Ô∏è Mapeamento de p√°ginas por perfil
      const rotasPermitidas = {
        admin: "dashboard-admin.html",
        administrador: "dashboard-admin.html",
        gerente: "dashboard-gerente.html",
        lider: "dashboard-lider.html",
        tecnico: "dashboard-tecnico.html"
      };

      const rotaEsperada = rotasPermitidas[perfil];
      if (!rotaEsperada) {
        console.error(`‚ùå [Agroverso] Perfil '${perfil}' n√£o mapeado para rota autorizada.`);
        return redirecionarParaLogin("Acesso negado. Perfil n√£o reconhecido.");
      }

      // üåê P√°gina atual sanitizada (sem diret√≥rios)
      const paginaAtual = window.location.pathname.split("/").pop();

      if (paginaAtual !== rotaEsperada) {
        console.warn(`üö´ [Agroverso] Perfil '${perfil}' tentou acessar '${paginaAtual}', mas deveria estar em '${rotaEsperada}'.`);
        return redirecionarParaLogin("Acesso restrito. Perfil n√£o autorizado para esta p√°gina.");
      }

      // ‚úÖ Acesso autorizado ‚Äî sess√£o validada com backend e perfil permitido
      console.info(`‚úÖ [Agroverso] Sess√£o autenticada: ${perfil.toUpperCase()} (${email})`);
      console.info(`üìÑ P√°gina atual: ${paginaAtual} | Rota autorizada: ${rotaEsperada}`);

      // üîÑ Torna os dados dispon√≠veis globalmente (se necess√°rio)
      window.usuarioAgroverso = { perfil, email };

    })
    .catch((erro) => {
      console.error("‚ùå [Agroverso] Erro de rede ao validar sess√£o:", erro);
      redirecionarParaLogin("Falha na comunica√ß√£o com o servidor. Fa√ßa login novamente.");
    });

})();
