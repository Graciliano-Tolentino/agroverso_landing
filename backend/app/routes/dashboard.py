# ============================================================================================
# üìä dashboard.py ‚Äì Rotas Protegidas por JWT para Painel Administrativo ‚Ä¢ Agroverso
# ============================================================================================
# üìå Este m√≥dulo fornece endpoints REST para visualiza√ß√£o e gest√£o de or√ßamentos:
#   - Listagem por setor
#   - Filtros por status
#   - Atualiza√ß√£o de status
# üîê Todos os acessos s√£o protegidos por autentica√ß√£o JWT (get_current_user).
# --------------------------------------------------------------------------------------------
# ‚ú® Desenvolvido com sabedoria (sem√¢ntica clara), for√ßa (seguran√ßa robusta) e beleza
#     (interface REST modular, extens√≠vel e integrada ao ecossistema Agroverso).
# ============================================================================================

from fastapi import APIRouter, Depends, HTTPException, status, Path, Query, Body
from sqlalchemy.orm import Session
from typing import List, Optional

from app.database import get_db
from app.dependencies.auth import get_current_user
from app.models.orcamento import Orcamento
from app.schemas.orcamento import OrcamentoResponse, OrcamentoStatusUpdate
from app.models.usuario import Usuario

# ============================================================================================
# üîí Inicializa√ß√£o do Router com prote√ß√£o JWT global
# ============================================================================================

router = APIRouter(
    prefix="/api/dashboard",
    tags=["üìä Dashboard"],
    dependencies=[Depends(get_current_user)]
)

# ============================================================================================
# üì• GET /setor/{setor} ‚Äì Listar Or√ßamentos por Setor
# ============================================================================================
# üéØ Retorna todos os or√ßamentos do setor especificado (ex: "hidroponia", "energia").
# ============================================================================================

@router.get("/setor/{setor}", response_model=List[OrcamentoResponse])
def listar_orcamentos_por_setor(
    setor: str,
    db: Session = Depends(get_db)
):
    orcamentos = db.query(Orcamento).filter(Orcamento.setor == setor).all()

    if not orcamentos:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Nenhum or√ßamento encontrado para o setor '{setor}'."
        )

    return orcamentos

# ============================================================================================
# üîç GET /filtro ‚Äì Filtrar Or√ßamentos por Status
# ============================================================================================
# üéØ Retorna or√ßamentos que correspondem ao status fornecido (opcional).
# ============================================================================================

@router.get("/filtro", response_model=List[OrcamentoResponse])
def filtrar_orcamentos_por_status(
    status: Optional[str] = Query(None, description="Status do or√ßamento (ex: pendente)"),
    db: Session = Depends(get_db)
):
    query = db.query(Orcamento)
    if status:
        query = query.filter(Orcamento.status == status)

    resultados = query.all()

    if not resultados:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Nenhum or√ßamento encontrado com os crit√©rios informados."
        )

    return resultados

# ============================================================================================
# üõ† PATCH /orcamentos/{id} ‚Äì Atualizar Status de um Or√ßamento
# ============================================================================================
# üéØ Atualiza o campo `status` de um or√ßamento existente com base no ID informado.
# ============================================================================================

@router.patch("/orcamentos/{id}", response_model=OrcamentoResponse)
def atualizar_status_orcamento(
    id: int = Path(..., title="ID do or√ßamento", gt=0),
    dados: OrcamentoStatusUpdate = Body(...),
    db: Session = Depends(get_db)
):
    orcamento = db.query(Orcamento).filter(Orcamento.id == id).first()

    if not orcamento:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Or√ßamento com ID {id} n√£o encontrado."
        )

    orcamento.status = dados.status
    db.commit()
    db.refresh(orcamento)

    return orcamento

